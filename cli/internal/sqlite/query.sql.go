// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlite

import (
	"context"
)

const insertDocument = `-- name: InsertDocument :exec
INSERT INTO DOCUMENT (
  ID, SOURCE_ID, TYPE, PURPOSE, RAW_DATA, EXTRACTED_DATA
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type InsertDocumentParams struct {
	ID            string
	SourceID      string
	Type          string
	Purpose       string
	RawData       string
	ExtractedData string
}

func (q *Queries) InsertDocument(ctx context.Context, arg InsertDocumentParams) error {
	_, err := q.db.ExecContext(ctx, insertDocument,
		arg.ID,
		arg.SourceID,
		arg.Type,
		arg.Purpose,
		arg.RawData,
		arg.ExtractedData,
	)
	return err
}

const insertDocumentTag = `-- name: InsertDocumentTag :exec
INSERT INTO DOCUMENT_TAG (
  SOURCE_ID, DOCUMENT_ID, TAG_KEY, TAG_VALUE
) VALUES (
  ?, ?, ?, ?
)
`

type InsertDocumentTagParams struct {
	SourceID   string
	DocumentID string
	TagKey     string
	TagValue   string
}

func (q *Queries) InsertDocumentTag(ctx context.Context, arg InsertDocumentTagParams) error {
	_, err := q.db.ExecContext(ctx, insertDocumentTag,
		arg.SourceID,
		arg.DocumentID,
		arg.TagKey,
		arg.TagValue,
	)
	return err
}

const insertSection = `-- name: InsertSection :exec
INSERT INTO SECTION (
  ID, DOCUMENT_ID, SOURCE_ID, PARENT_ID, PEER_ORDER, NAME, EXTRACTED_DATA
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type InsertSectionParams struct {
	ID            string
	DocumentID    string
	SourceID      string
	ParentID      string
	PeerOrder     interface{}
	Name          string
	ExtractedData string
}

func (q *Queries) InsertSection(ctx context.Context, arg InsertSectionParams) error {
	_, err := q.db.ExecContext(ctx, insertSection,
		arg.ID,
		arg.DocumentID,
		arg.SourceID,
		arg.ParentID,
		arg.PeerOrder,
		arg.Name,
		arg.ExtractedData,
	)
	return err
}

const insertSectionTag = `-- name: InsertSectionTag :exec
INSERT INTO SECTION_TAG (
  SOURCE_ID, DOCUMENT_ID, SECTION_ID, TAG_KEY, TAG_VALUE
) VALUES (
  ?, ?, ?, ?, ?
)
`

type InsertSectionTagParams struct {
	SourceID   string
	DocumentID string
	SectionID  string
	TagKey     string
	TagValue   string
}

func (q *Queries) InsertSectionTag(ctx context.Context, arg InsertSectionTagParams) error {
	_, err := q.db.ExecContext(ctx, insertSectionTag,
		arg.SourceID,
		arg.DocumentID,
		arg.SectionID,
		arg.TagKey,
		arg.TagValue,
	)
	return err
}

const insertSource = `-- name: InsertSource :exec
INSERT INTO SOURCE (
  ID, DESCRIPTION, CRAWLER, ROOT
) VALUES (
  ?, ?, ?, ?
)
`

type InsertSourceParams struct {
	ID          string
	Description string
	Crawler     string
	Root        string
}

func (q *Queries) InsertSource(ctx context.Context, arg InsertSourceParams) error {
	_, err := q.db.ExecContext(ctx, insertSource,
		arg.ID,
		arg.Description,
		arg.Crawler,
		arg.Root,
	)
	return err
}
